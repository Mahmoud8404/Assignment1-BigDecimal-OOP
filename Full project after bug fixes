#include <bits/stdc++.h>
#include <regex>
using namespace std;

class BigDecimalInt{
private:
    //positive
    vector<int> container;
    string decString;
    int intSize{};
    int veSign{};

public:

    BigDecimalInt(){}

    BigDecimalInt(string decStr)
    {

        bool isInput{true};
        regex signBigDecimalFormat("(\\+|-)?(\\d+)");
        regex negBigDecimalFormat("(-)(\\d+)");
        regex normBigDecimalFormat("(\\d+)");
        int intSign;

        while (isInput) {
            cout << "Please enter an int:" << endl;
            cin >> decStr;
            if (regex_match(decStr, signBigDecimalFormat)) {
                decString = decStr;
                intSize = decStr.size();
                if (regex_match(decString, negBigDecimalFormat)) {
                    intSign = 1, veSign = -1;
                } else if (regex_match(decString, normBigDecimalFormat)) {
                    intSign = 0, veSign = 1;
                } else {
                    intSign = 1, veSign = 1;
                }

                for (int nIndex = intSize; nIndex >= intSign; nIndex--) {
                    container.push_back(decString[nIndex] - '0');
                }
                isInput = false;
            }else{
                cout << "Bad Input, Try Again." << endl;
            }
        }
    }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    bool operator==(BigDecimalInt anotherDec)
    {
        return ((veSign == anotherDec.veSign) && (intSize == anotherDec.intSize));
    }
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    bool operator< (BigDecimalInt anotherDec)
    {
        return ((anotherDec.veSign < veSign) || ((anotherDec.veSign == veSign)&&(anotherDec.intSize < intSize)));
    }
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    bool operator> (BigDecimalInt anotherDec)
    {
        return ((anotherDec.veSign > veSign) || ((anotherDec.veSign == veSign)&&(anotherDec.intSize > intSize)));
    }
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//    BigDecimalInt operator= (BigDecimalInt anotherDec) {
//        BigDecimalInt temp;
//        temp.container.swap(anotherDec.container);
//        temp.veSign = anotherDec.veSign;
//        temp.intSize = anotherDec.intSize;
//        return temp;
//    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BigDecimalInt operator+ (BigDecimalInt anotherDec){
        BigDecimalInt temp;
        vector<int> smallerContainer;
        vector<int> biggerContainer;
        if ((anotherDec.intSize > intSize)){
            smallerContainer = container;
            biggerContainer = anotherDec.container;
            temp.veSign = anotherDec.veSign;
        }else{
            smallerContainer = anotherDec.container;
            biggerContainer = container;
            temp.veSign = veSign;
        }
        temp.container.assign(biggerContainer.size(),0);

        if (veSign == anotherDec.veSign) {
            for (int nIndex = 1; nIndex < biggerContainer.size(); nIndex++) {
                ////
                int carry = biggerContainer[nIndex] + smallerContainer[nIndex];

                ////
                if ((temp.container[nIndex] + carry) < 10) {
                    temp.container[nIndex] += carry;
                } else {
                    temp.container[nIndex] += (carry - 10);
                    temp.container[nIndex + 1] += 1;

                    if (nIndex == (temp.container.size()-1)) {
                        pushBack:
                        temp.container.push_back(1);
                        goto sumJump;
                    }else if (nIndex == (smallerContainer.size()-1)){
                        nIndex++;
                        while(nIndex < biggerContainer.size())
                        {
                            temp.container[nIndex] += biggerContainer[nIndex];
                            if (temp.container[nIndex] > 9){
                                temp.container[nIndex] -= 10;
                                if (nIndex == (biggerContainer.size()-1)){
                                    goto pushBack;
                                }
                                temp.container[nIndex+1] += 1;
                            }
                            nIndex++;
                        }
                        goto sumJump;
                    }
                }
            }
        }else{
            for (int nIndex = 1; nIndex < temp.container.size(); nIndex++) {
                int carry = biggerContainer[nIndex] - smallerContainer[nIndex];
                if (carry >= 0){
                    temp.container[nIndex] += carry;
                } else {
                    temp.container[nIndex] += (carry + 10);
                    temp.container[nIndex + 1] -= 1;

                    if (nIndex == (temp.container.size()-1)) {
                        popBack:
                        temp.container.pop_back();
                        goto sumJump;
                    }else if (nIndex == (smallerContainer.size()-1)){
                        nIndex++;
                        while(nIndex < biggerContainer.size()){
                            temp.container[nIndex] += biggerContainer[nIndex];
                            if (temp.container[nIndex] < 0){
                                temp.container[nIndex] += 10;
                                if (nIndex == (biggerContainer.size()-1)){
                                    goto popBack;
                                }
                                temp.container[nIndex+1] -= 1;
                            }
                            nIndex++;
                        }
                        goto sumJump;
                    }
                }
            }
        }
        sumJump:
        temp.container.shrink_to_fit();
        temp.intSize = temp.container.size()-1;
        return temp;
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    BigDecimalInt operator- (BigDecimalInt anotherDec) {
        BigDecimalInt temp;
        vector<int> smallerContainer;
        vector<int> biggerContainer;
        if ((anotherDec.intSize > intSize)){
            smallerContainer = container;
            biggerContainer = anotherDec.container;
            temp.veSign = anotherDec.veSign;
        }else{
            smallerContainer = anotherDec.container;
            biggerContainer = container;
            temp.veSign = veSign;
        }
        temp.container.assign(biggerContainer.size(),0);

        if (veSign == anotherDec.veSign){
            for (int nIndex = 1; nIndex < temp.container.size(); nIndex++) {
                int carry = biggerContainer[nIndex] - smallerContainer[nIndex];
                if (carry >= 0){
                    temp.container[nIndex] += carry;
                } else {
                    temp.container[nIndex] += (carry *- 1);
                    temp.container[nIndex + 1] -= 1;

                    if (nIndex == (temp.container.size()-1)) {
                        popBack:
                        temp.container.pop_back();
                        goto jump;
                    }else if (nIndex == (smallerContainer.size()-1)){
                        nIndex++;
                        while(nIndex < biggerContainer.size()){
                            temp.container[nIndex] += biggerContainer[nIndex];
                            if (temp.container[nIndex] < 0){
                                temp.container[nIndex] += 10;
                                if (nIndex == (biggerContainer.size()-1)){
                                    goto popBack;
                                }
                                temp.container[nIndex+1] -= 1;
                            }
                            nIndex++;
                        }
                        goto jump;
                    }
                }
            }
        } else{
            for (int nIndex = 1; nIndex < biggerContainer.size(); nIndex++) {
                ////
                int carry = biggerContainer[nIndex] + smallerContainer[nIndex];

                ////
                if ((temp.container[nIndex] + carry) < 10) {
                    temp.container[nIndex] += carry;
                } else {
                    temp.container[nIndex] += (carry - 10);
                    temp.container[nIndex + 1] += 1;

                    if (nIndex == (temp.container.size()-1)) {
                        pushBack:
                        temp.container.push_back(1);
                        goto jump;
                    }else if (nIndex == (smallerContainer.size()-1)){
                        nIndex++;
                        while(nIndex < biggerContainer.size()){
                            temp.container[nIndex] += biggerContainer[nIndex];
                            if (temp.container[nIndex] > 9){
                                temp.container[nIndex] -= 10;
                                if (nIndex == (biggerContainer.size()-1)){
                                    goto pushBack;
                                }
                                temp.container[nIndex+1] += 1;
                            }
                            nIndex++;
                        }
                        goto jump;
                    }
                }
            }
        }
        jump:
        temp.container.shrink_to_fit();
        temp.intSize = temp.container.size()-1;
        return temp;
    }
    ///////////////////////////////////////////////////////////////////////////////
    friend ostream& operator << (ostream& out, BigDecimalInt anotherDec){
        out << ( (anotherDec.veSign > 0) ? (" ") : ("-") );
        for (int i = anotherDec.intSize; i > 0; i--)
        {
            out << anotherDec.container[i] << " ";
        }
        return out;
    }
};


int main(){

    string decStr;
    string decStr2;
    string operation;
    bool isOpChoice{true};

    cout << "\nHello to Infinite Numbers Addition/Subtraction Calculator :)\n" << endl;
    BigDecimalInt num1("123456789012345678901234567890");
    BigDecimalInt num2("+113456789011345678901134567890");
    BigDecimalInt num3("-200000000000000000000000000000");
    BigDecimalInt num4 = num2 + num1;
    BigDecimalInt num5 = num2 - num1;
    cout << "num1 = " << num1 << endl;
    cout << "num2 = " << num2 << endl;
    //Next statement will print 236913578023691357802369135780
    cout << "num2 + num1 = " << num4 << endl;
    //Next statement will print -313456789011345678901134567890
    cout << "num2 - num1 = " << num5 << endl;////<<

    cout << "Above are the test cases that were asked to do\n\n"
         << "What would you like to do today?\n"
         << "(0)Addition\n"
         << "(1)Subtraction" << endl;


    while (isOpChoice) {
        cout << "Choice:\n";
        cin >> operation;
        if (operation == "0") {

            BigDecimalInt firstInt(decStr), secondInt(decStr2), sumOfInt;
            sumOfInt = firstInt + secondInt;
            cout << "First No. + Second No. = " << sumOfInt;
            goto exit;

        }else if(operation == "1"){

            BigDecimalInt firstInt(decStr), secondInt(decStr2), subOfInt;
            subOfInt = firstInt - secondInt;
            cout << "First No. - Second No. = " << subOfInt;
            goto exit;

        }else {
            cout << "Wrong input for Operation, Please Try Again." << endl;
        }
    }
    exit:
        return 0;
}
